{"name":"Worldmake","tagline":"Distributed, Lazy, Pure Functional Build Tool for Reproducible Research","body":"WorldMake is a system for executing computational workflows, tracking provenance, and keeping derived results up to date.  It can be used for any situation involving a network of computations that depend on one another, such as:\r\n\r\n* software compilation\r\n* software package management\r\n* continuous integration and testing\r\n* reproducible research\r\n\r\n*WorldMake is presently alpha-level research software.  Consequently some of the below are \"forward looking statements\" describing features which are not yet fully fleshed out.  We are however confident in the model and the basic functionality.*\r\n\r\nLike the venerable `make` tool, WorldMake guarantees that a collection of derived results are up-to-date and internally consistent, while avoiding redundant computation.  But it provides much more:\r\n\r\n* Recipes (i.e., steps of a workflow) are easily **shareable** through distributed version control (e.g., GitHub).\r\n* Recipes can be **easily composed** from other recipes obtained from different repositories.\r\n* Consequently, workflow specifications can be **distributed among collaborators**-- i.e., if my collaborator updates an input file, I can automatically recompute dependent results.\r\n\r\n* The stateless, pure functional nature of workflows guarantees **reproducibility** of results.\r\n* SHA-256 hashing throughout provides for automatic **integrity verification** of results.\r\n* Rigorous **provenance tracking**, including timing information and log outputs.\r\n* Storage of **historical results**, for easy comparison with the latest version of a given output *(subject to a garbage collection policy, to keep storage requirements in check)*.\r\n* **Archival** of the complete provenance of any artifact, including all prerequisite inputs, intermediate results, and derivation programs.\r\n* Automatic **concurrent execution** of independent computations, both on single **multicore machines** and on **SGE clusters**.\r\n* Workflows are specified in **Scala**, providing all the flexibility of a **real programming language** (as opposed to highly constrained and frankly wonky dependency languages such as Make).  Aside from the syntactic improvement, this means that workflows can be structured like any other program, enjoying all the benefits of object orientation, inheritance, packaging, information hiding, and so forth.\r\n* It is trivial to specify **parameter sweeps**, as well as to gather and filter sweep results for plotting or downstream analysis.\r\n* Workflow computations are **strongly typed**, facilitating both compile-time and runtime checking that the output of one recipe is a valid input for the next.  In fact, authoring workflows in a Scala-type-aware IDE such as IntelliJ IDEA provides instantaneous feedback on type compatibility.\r\n\r\nMeaning of the name \"WorldMake\"\r\n===============================\r\n\r\n1.  While not technically related to `make` in any way, WorldMake is in some ways its conceptual descendant, and provides a superset of its functionality.\r\n2.  WorldMake recipes, inputs, intermediate results, and outputs can be publicly shared and composed with full tracking of provenance.  This means that if someone has already done the computation that you want to do and is sharing the result, you can just download that output with full confidence that it is the same result you would have computed.  Thus, in a sense, all users are participating in a single worldwide build system.\r\n3.  All outputs of a workflow ultimately derive from a set of concrete, non-derived inputs such as raw data files and source code (both of the workflow components and of the workflow itself).  These inputs are axioms, and together they define a World of potential derivations--which must of course be internally consistent.  So, the name is meant to evoke this concept of a consistent container.  If you disagree with someone about an axiom, then you are living in a different World, so naturally your results may not agree with theirs. \r\n\r\nPrerequisites\r\n=============\r\n\r\n* MongoDB\r\n* JDK 1.7\r\n\r\nFor cluster usage: \r\n\r\n* SGE (i.e., \"qsub\"), with a filesystem shared among the head and compute nodes.  *(Support for operation without a shared filesystem is planned for a future version).*\r\n\r\nInstallation and configuration\r\n==============================\r\n\r\nWorldMake is distributed as a single jar file, together with an executable shell script \"wm\" for setting default command-line parameters.  Just put these in some convenient place, accessible in your path.\r\n\r\nNext create the file ~/.worldmake/application.conf, and populate it with configuration options as follows:\r\n\r\nStorage configuration\r\n---------------------\r\n\r\nWorldMake tracks workflow inputs, intermediate results, and outputs in two forms: metadata and small artifacts are stored in a Mongo database, and larger files are stored in a managed directory tree in the filesystem.  Log files are similarly stored either in the database or in the filesystem, depending on size.\r\n\r\nVarious filesystem paths below are independently configurable, but it's probably easiest to puth tem all together in some convenient place, e.g. `~/worldmake` for personal usage or `/somewhere/worldmake` for shared usage.  Just be sure that there's a lot of space available at that location!\r\n\r\n    # MongoDB connection information\r\n    mongoHost = mongoserver.mydomain.com\r\n    mongoDbName = worldmake\r\n    \r\n    # Filesystem locations for primary artifact storage and log storage\r\n    filestore = /somewhere/worldmake/file\r\n    logstore = /somewhere/worldmake/log\r\n \r\nDerivations are performed in a temporary working directory, where they may write ephemeral files which are not considered part of the output.\r\n    \r\n    # location for working directories\r\n    localTempDir = /tmp/worldmake\r\n\r\nVCS integration\r\n---------------\r\n\r\n    # the root path of a remote Git server containing your repos\r\n    gitremote = \"file:///Git_Repos/worldmake/\"\r\n    \r\n    # A local path where Git clones can be kept\r\n    gitlocal = /somewhere/worldmake/gitlocal/\r\n    \r\n    # the root path of a remote Mercurial server containing your repos\r\n    hgremote = \"file:///somewhere/worldmake/hgcanonical/\"\r\n    \r\n    # A local path where Mercurial clones can be kept\r\n    hglocal = /somewhere/worldmake/hglocal/\r\n\r\nSGE options\r\n-----------\r\n\r\nAt present, SGE usage requires the `filestore` and `logstore` options above to be on a shared filesystem.\r\n\r\n    qsub = /opt/sge-6.2u5/bin/lx24-amd64/qsub\r\n    qstat = /opt/sge-6.2u5/bin/lx24-amd64/qstat\r\n    \r\n    # this directory must be on a shared filesystem.\r\n    qsubGlobalTempDir = /emerge/umass/worldmake/qsubTmp\r\n    \r\nExecution options\r\n-----------------\r\n\r\n    # working directories are deleted by default when a provenance succeeds; however it may be useful to retain them for debugging.\r\n    # working directories of failed provenances are retained, regardless, until the provenance itself is garbage-collected.\r\n    debugWorkingDirectories = true\r\n    \r\n    # this PATH will be available within system derivations.  (This constitutes a leak in purity and so is distasteful, but it's expedient for now).\r\n    globalpath = \"/sw/bin:/sw/sbin:/Developer/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/bin:/bin:/opt/X11/bin:/opt/local/bin:/opt/git-1.7.4.1-x86_64/bin:/usr/java/jdk1.7.0_21/bin\"\r\n    \r\n    # When computing the hash of a Path artifact, ignore these filenames.  Include anything here that is ephemeral and/or meaningless as far as the derivation is concerned, so that irrelevant changes don't break artifact identity.\r\n    ignoreFilenames = [ \".hg\", \".git\", \".svn\" ]\r\n    \r\n    # Keep trying to compute failed derivations.  It's probably best to leave this false, so that you can fix the cause of the failure.  A value fo true only makes sense if your derivations may exhibit transient errors that you prefer to ignore.\r\n    retryFailures = false \r\n    \r\n    # Method of executing system derivations (i.e., snippets of shell script).\r\n    # Options: \"local\", \"qsub\"\r\n    executor = qsub\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}